pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = "johnnoon74/grpc-server"
        DOCKER_REGISTRY_CREDENTIALS = "docker-hub-credentials"
        DOCKER_IMAGE = ""
        DOTNET_VERSION = ".NET 8"
    }

    stages {
        stage('Build .NET') {
            steps {
                dotnetBuild sdk: "${DOTNET_VERSION}", project: "Server/Server.csproj"
                archiveArtifacts allowEmptyArchive: false, artifacts: 'Server/bin/Release/**', caseSensitive: true, defaultExcludes: true, fingerprint: false, onlyIfSuccessful: true
            }
        }

        stage('Build Docker Image') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script{
                    DOCKER_IMAGE = docker.build DOCKER_REGISTRY+":$BUILD_NUMBER"
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    docker.withRegistry('', DOCKER_REGISTRY_CREDENTIALS) {
                        DOCKER_IMAGE.push()
                    }
                }
                
            }
        }
    }

    post {
        success {
            echo "Build and Push to Docker successful!"
        }
        failure {
            echo "Build or Push to Docker failed. Check the logs for more information."
        }
    }
}
